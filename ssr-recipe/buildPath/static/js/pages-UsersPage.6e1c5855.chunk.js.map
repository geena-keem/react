{"version":3,"sources":["components/User.js","lib/PreloadContext.js","containers/UserContainer.js","components/Users.js","containers/UsersContainer.js","pages/UsersPage.js"],"names":["User","user","email","name","username","PreloadContext","createContext","Preloader","resolve","preloadContext","useContext","done","promises","push","Promise","UserContainer","id","useSelector","state","users","dispatch","useDispatch","usePreloader","getUser","useEffect","parseInt","Users","map","to","connect","getUsers","UsersPage","path","render","match","params"],"mappings":"yJAgBeA,EAdF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACNC,EAA0BD,EAA1BC,MAAOC,EAAmBF,EAAnBE,KAAMC,EAAaH,EAAbG,SACrB,OACE,gCACE,+BACGA,EADH,KACeD,EADf,OAGA,8BACE,wCADF,IACkBD,SCNlBG,EAAiBC,wBAAc,MAKxBC,EAAY,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpBC,EAAiBC,qBAAWL,GAClC,OAAKI,GACDA,EAAeE,MAKnBF,EAAeG,SAASC,KAAKC,QAAQN,QAAQA,MALb,MADJ,M,QCafO,EAlBO,SAAC,GAAY,IAAVC,EAAS,EAATA,GACjBf,EAAOgB,aAAY,SAACC,GAAD,OAAWA,EAAMC,MAAMlB,QAC1CmB,EAAWC,cAYjB,ODE0B,SAACb,GAC3B,IAAMC,EAAiBC,qBAAWL,GAC7BI,IACDA,EAAeE,MACnBF,EAAeG,SAASC,KAAKC,QAAQN,QAAQA,OChB7Cc,EAAa,kBAAMF,EAASG,YAAQP,OAEpCQ,qBAAU,WACJvB,GAAQA,EAAKe,KAAOS,SAAST,EAAI,KAErCI,EAASG,YAAQP,MAChB,CAACI,EAAUJ,EAAIf,IAIbA,EACE,cAAC,EAAD,CAAMA,KAAMA,IADD,M,QCFLyB,EAfD,SAAC,GAAe,IAAbP,EAAY,EAAZA,MACf,OAAKA,EAEH,8BACE,6BACGA,EAAMQ,KAAI,SAAC1B,GAAD,OACT,6BACE,cAAC,IAAD,CAAM2B,GAAE,iBAAY3B,EAAKe,IAAzB,SAAgCf,EAAKG,oBAN5B,MCgBNyB,eACb,SAACX,GAAD,MAAY,CACVC,MAAOD,EAAMC,MAAMA,SAErB,CACEW,cALWD,EAdQ,SAAC,GAAyB,IAAvBV,EAAsB,EAAtBA,MAAOW,EAAe,EAAfA,SAM/B,OAJAN,qBAAU,WACJL,GACJW,MACC,CAACA,EAAUX,IAEZ,gCACE,cAAC,EAAD,CAAOA,MAAOA,IACd,cAAC,EAAD,CAAWX,QAASsB,UCEXC,UAZG,WAChB,OACE,gCACE,cAAC,EAAD,IACA,cAAC,IAAD,CACEC,KAAK,aACLC,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OAAe,cAAC,EAAD,CAAelB,GAAIkB,EAAMC,OAAOnB","file":"static/js/pages-UsersPage.6e1c5855.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst User = ({ user }) => {\r\n  const { email, name, username } = user;\r\n  return (\r\n    <div>\r\n      <h1>\r\n        {username} ({name})\r\n      </h1>\r\n      <p>\r\n        <b>e-mail:</b> {email}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","import { createContext, useContext } from 'react';\r\n\r\n// 클라이언트 환경: null\r\n// 서버 환경: {done: false, promises: []}\r\nconst PreloadContext = createContext(null);\r\n\r\nexport default PreloadContext;\r\n\r\n// resolve는 함수 타입이다.\r\nexport const Preloader = ({ resolve }) => {\r\n  const preloadContext = useContext(PreloadContext);\r\n  if (!preloadContext) return null; // context 값이 유효하지 않다면 아무것도 하지 않는다.\r\n  if (preloadContext.done) return null; // 이미 작업이 끝났다면 아무것도 하지 않는다.\r\n\r\n  // Promises 배열에 프로미스 등록\r\n  // 설령 resolve 함수가 프로미스를 반환하지 않더라도, 프로미스 취급을 하기 위해\r\n  // Promise.resolve 함수 사용\r\n  preloadContext.promises.push(Promise.resolve(resolve()));\r\n  return null;\r\n};\r\n\r\n// Hook 형태로 사용할 수 있는 함수\r\nexport const usePreloader = (resolve) => {\r\n  const preloadContext = useContext(PreloadContext);\r\n  if (!preloadContext) return null;\r\n  if (preloadContext.done) return null;\r\n  preloadContext.promises.push(Promise.resolve(resolve()));\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport User from '../components/User';\r\nimport { usePreloader } from '../lib/PreloadContext';\r\nimport { getUser } from '../modules/users';\r\n\r\nconst UserContainer = ({ id }) => {\r\n  const user = useSelector((state) => state.users.user);\r\n  const dispatch = useDispatch();\r\n\r\n  usePreloader(() => dispatch(getUser(id))); // 서버 사이드 렌더링 할 때 API 호출하기!\r\n\r\n  useEffect(() => {\r\n    if (user && user.id === parseInt(id, 10)) return;\r\n    // 사용자가 존재하고, id가 일치한다면 요청하지 않는다.\r\n    dispatch(getUser(id));\r\n  }, [dispatch, id, user]); // id가 바뀔 때 새로 요청해야 한다.\r\n\r\n  // 컨테이너 유효성 검사 후 return null을 해야 하는 경우에\r\n  // null대신 Preloader를 반환\r\n  if (!user) return null;\r\n  return <User user={user} />;\r\n};\r\n\r\nexport default UserContainer;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Users = ({ users }) => {\r\n  if (!users) return null; // users가 유효하지 않다면 아무것도 보여 주지 않는다.\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {users.map((user) => (\r\n          <li>\r\n            <Link to={`/users/${user.id}`}>{user.username}</Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Users from '../components/Users';\r\nimport { Preloader } from '../lib/PreloadContext';\r\nimport { getUsers } from '../modules/users';\r\n\r\nconst UsersContainer = ({ users, getUsers }) => {\r\n  // 컴포넌트가 마운트되고 나서 호출\r\n  useEffect(() => {\r\n    if (users) return; // users가 이미 유효하다면 요청하지 않음\r\n    getUsers();\r\n  }, [getUsers, users]);\r\n  return (\r\n    <div>\r\n      <Users users={users} />\r\n      <Preloader resolve={getUsers} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    users: state.users.users,\r\n  }),\r\n  {\r\n    getUsers,\r\n  },\r\n)(UsersContainer);\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport UserContainer from '../containers/UserContainer';\r\nimport UsersContainer from '../containers/UsersContainer';\r\n\r\nconst UsersPage = () => {\r\n  return (\r\n    <div>\r\n      <UsersContainer />\r\n      <Route\r\n        path=\"/users/:id\"\r\n        render={({ match }) => <UserContainer id={match.params.id} />}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsersPage;\r\n"],"sourceRoot":""}